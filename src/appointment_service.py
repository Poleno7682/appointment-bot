"""
–°–µ—Ä–≤–∏—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–æ–≤.
–û—Å–Ω–æ–≤–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏.
"""
import json
import time
import random
import logging
from typing import Dict, Any, List, Optional
import requests
from dataclasses import dataclass

from .config_manager import ConfigManager
from .telegram_service import TelegramService, VisitInfo
from .utils import (
    generate_phone, find_next_dates, get_chrome_session, setup_csrf_token,
    get_server_current_date, find_dates_from_date
)


@dataclass
class ServiceEntry:
    """–î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    branch_name: str
    branch_id: str
    service_name: str
    service_id: str
    qp_id: str
    adult: int
    visits_per_day: int
    last_registered_date: Optional[str]


class AppointmentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–∏."""
    
    def __init__(self, config_manager: ConfigManager, telegram_service: TelegramService):
        self.config = config_manager
        self.telegram = telegram_service
        self._session = None
    
    def _create_session(self) -> requests.Session:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å JSESSIONID –∏ CSRF —Ç–æ–∫–µ–Ω–æ–º."""
        try:
            session, jsessionid = get_chrome_session(self.config.site_url)
            setup_csrf_token(session, self.config.base_url)
            logging.info("‚úì –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return session
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            raise
    
    def _get_service_details(self, session: requests.Session, 
                           service_entry: ServiceEntry) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏ –æ—Ç API."""
        try:
            url = f"{self.config.base_url}/branches/{service_entry.branch_id}/services;validate=true"
            full_services = session.get(url, timeout=30).json()
            
            service = next(
                (s for s in full_services if s["publicId"] == service_entry.service_id), 
                None
            )
            
            if not service:
                logging.warning(f"–£—Å–ª—É–≥–∞ {service_entry.service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
                
            return service
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —É—Å–ª—É–≥–∏ {service_entry.service_name}: {e}")
            return None
    
    def _get_available_dates(self, session: requests.Session, 
                           service_entry: ServiceEntry, slot_length: int) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏."""
        try:
            url = (f"{self.config.base_url}/branches/{service_entry.branch_id}/dates;"
                  f"servicePublicId={service_entry.service_id};"
                  f"customSlotLength={slot_length}")
            
            dates = session.get(url, timeout=30).json()
            filtered_dates = find_next_dates(dates, service_entry.last_registered_date)
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –¥–∞—Ç
            if filtered_dates:
                logging.info(f"[{service_entry.service_name}] –ù–∞–π–¥–µ–Ω–æ {len(filtered_dates)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç")
            
            return filtered_dates
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç –¥–ª—è {service_entry.service_name}: {e}")
            return []
    
    def _get_available_times(self, session: requests.Session, 
                           service_entry: ServiceEntry, date: str, 
                           slot_length: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã."""
        try:
            url = (f"{self.config.base_url}/branches/{service_entry.branch_id}/dates/{date}/times;"
                  f"servicePublicId={service_entry.service_id};"
                  f"customSlotLength={slot_length}")
            
            return session.get(url, timeout=30).json()
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω –¥–ª—è {date}: {e}")
            return []
    
    def _reserve_appointment(self, session: requests.Session, 
                           service_entry: ServiceEntry, date: str, 
                           time_slot: str, slot_length: int) -> Optional[str]:
        """–†–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏."""
        try:
            url = (f"{self.config.base_url}/branches/{service_entry.branch_id}/dates/{date}/times/{time_slot}/reserve;"
                  f"customSlotLength={slot_length}")
            
            people_services = [{
                "publicId": service_entry.service_id,
                "qpId": service_entry.qp_id,
                "adult": service_entry.adult,
                "name": service_entry.service_name,
                "child": 0
            }]
            
            payload = {
                "services": [{"publicId": service_entry.service_id}],
                "custom": json.dumps({"peopleServices": people_services})
            }
            
            response = session.post(url, json=payload, timeout=30)
            reserve_data = response.json()
            
            appointment_id = (reserve_data.get("publicId") or 
                            reserve_data.get("value", {}).get("publicId"))
            
            if appointment_id:
                logging.info(f"‚úì –í—Ä–µ–º—è {time_slot} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {appointment_id}")
                return appointment_id
            else:
                return None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è {time_slot}: {e}")
            return None
    
    def _create_customer(self, session: requests.Session, phone: str) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ."""
        try:
            customer = {
                "email": self.config.email,
                "phone": phone,
                "firstName": "",
                "lastName": "",
                "dateOfBirth": "",
                "externalId": "",
                "addressLine1": "",
                "addressLine2": "",
                "addressCity": "",
                "addressZip": "",
                "addressState": "",
                "addressCountry": "",
                "custom": "{}"
            }
            
            url = f"{self.config.base_url}/matchCustomer"
            session.post(url, json=customer, timeout=30)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    def _confirm_appointment(self, session: requests.Session, 
                           appointment_id: str, service_entry: ServiceEntry, 
                           phone: str, slot_length: int) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å."""
        try:
            people_services = [{
                "publicId": service_entry.service_id,
                "qpId": service_entry.qp_id,
                "adult": service_entry.adult,
                "name": service_entry.service_name,
                "child": 0
            }]
            
            confirm_payload = {
                "customer": {
                    "email": self.config.email,
                    "phone": phone,
                    "firstName": "",
                    "lastName": "",
                    "dateOfBirth": "",
                    "externalId": "",
                    "addressLine1": "",
                    "addressLine2": "",
                    "addressCity": "",
                    "addressZip": "",
                    "addressState": "",
                    "addressCountry": "",
                    "custom": "{}"
                },
                "languageCode": "pl",
                "countryCode": "pl",
                "captcha": "",
                "custom": json.dumps({
                    "peopleServices": people_services,
                    "totalCost": 0,
                    "createdByUser": "Qmatic Web Booking",
                    "paymentRef": "",
                    "customSlotLength": slot_length
                }),
                "notes": "",
                "title": "Qmatic Web Booking",
                "notificationType": "both"
            }
            
            url = f"{self.config.base_url}/appointments/{appointment_id}/confirm"
            response = session.post(url, json=confirm_payload, timeout=30)
            
            return response.status_code == 200
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {appointment_id}: {e}")
            return False
    
    async def register_visit(self, service_entry: ServiceEntry, 
                           channel_id: str, channel_name: str, 
                           chat_id: str) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∏–∑–∏—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏.
        
        Args:
            service_entry: –î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
        Returns:
            True –µ—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –æ —Å–µ—Ä–≤–∏—Å–µ
        logging.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {service_entry.service_name} (adult={service_entry.adult}, last_date={service_entry.last_registered_date})")
        
        if not self._session:
            self._session = self._create_session()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏
        service_details = self._get_service_details(self._session, service_entry)
        if not service_details:
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        duration = int(service_details.get("duration", 20))
        additional = int(service_details.get("additionalDuration", 10))
        slot_length = duration + additional * (service_entry.adult - 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
        available_dates = self._get_available_dates(self._session, service_entry, slot_length)
        if not available_dates:
            logging.info(f"[{service_entry.service_name}] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –ø–æ—Å–ª–µ {service_entry.last_registered_date}")
            return False
        
        total_attempts = 0
        total_successes = 0
        last_processed_date = None
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
        for date in available_dates:
            times = self._get_available_times(self._session, service_entry, date, slot_length)
            if not times:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç—É –¥–∞—Ç—É –Ω–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                logging.info(f"[{service_entry.service_name}] –ù–µ—Ç –≤—Ä–µ–º–µ–Ω –Ω–∞ {date}")
                last_processed_date = date
                continue
            
            successful_registrations = 0
            times_copy = times[:]
            
            while successful_registrations < service_entry.visits_per_day and times_copy:
                time_data = random.choice(times_copy)
                times_copy.remove(time_data)
                time_slot = time_data["time"]
                total_attempts += 1
                
                # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                appointment_id = self._reserve_appointment(
                    self._session, service_entry, date, time_slot, slot_length
                )
                
                if not appointment_id:
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                phone = generate_phone(self.config.prefixes)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    self._create_customer(self._session, phone)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                    continue
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                if self._confirm_appointment(self._session, appointment_id, service_entry, phone, slot_length):
                    successful_registrations += 1
                    total_successes += 1
                    logging.info(f"‚úì –í–∏–∑–∏—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {date} {time_slot} | {phone}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    if self.config.telegram_enabled:
                        visit_info = VisitInfo(
                            service_name=service_entry.service_name,
                            slot_length=slot_length,
                            date=date,
                            time=time_slot,
                            phone=phone,
                            channel_name=channel_name
                        )
                        
                        await self.telegram.send_visit_notification(visit_info, chat_id)
                    
                    # üîë –ó–ê–ü–û–ú–ò–ù–ê–ï–ú –î–ê–¢–£ –Ω–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                    last_processed_date = date
                    
                    # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å?
                    if successful_registrations >= service_entry.visits_per_day:
                        logging.info(f"üéØ –õ–∏–º–∏—Ç {service_entry.visits_per_day} –≤–∏–∑–∏—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞ {date}")
                        break  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
                else:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è {time_slot}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                time.sleep(random.uniform(5, 10))
            
            # –ï—Å–ª–∏ –Ω–∞ –¥–∞—Ç–µ –±—ã–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞—Ç—É
            if successful_registrations > 0 or not times_copy:
                last_processed_date = date
                if successful_registrations < service_entry.visits_per_day and not times_copy:
                    logging.info(f"‚ö†Ô∏è –ù–∞ {date} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–ª—å–∫–æ {successful_registrations}/{service_entry.visits_per_day} –≤–∏–∑–∏—Ç–æ–≤ (–Ω–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω)")
            
            # ‚úÖ –ï–°–õ–ò –ë–´–õ–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò, –º–æ–∂–µ–º –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª
            if successful_registrations > 0:
                break
        
        # üîë –û–ë–ù–û–í–õ–Ø–ï–ú last_registered_date –¢–û–õ–¨–ö–û –í –ö–û–ù–¶–ï, –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if total_successes > 0 and last_processed_date:
            self.config.update_service_last_date(channel_id, service_entry.service_id, last_processed_date)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏
            if total_attempts > total_successes:
                logging.info(f"üìä [{service_entry.service_name}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_successes}/{total_attempts} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π")
            return True
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—Ö–æ–≤
        if total_attempts > 0:
            logging.info(f"üìä [{service_entry.service_name}] –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã: 0/{total_attempts} —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π")
        
        return False
    
    async def process_all_services(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö."""
        for channel in self.config.channels:
            channel_id = channel['id']
            channel_name = channel['name']
            chat_id = channel['chat_id']
            
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_name}")
            
            for service_data in channel.get('services', []):
                try:
                    service_entry = ServiceEntry(
                        branch_name=service_data['branch_name'],
                        branch_id=service_data['branch_id'],
                        service_name=service_data['service_name'],
                        service_id=service_data['service_id'],
                        qp_id=service_data['qpId'],
                        adult=service_data['adult'],
                        visits_per_day=service_data['visits_per_day'],
                        last_registered_date=service_data.get('last_registered_date')
                    )
                    
                    await self.register_visit(service_entry, channel_id, channel_name, chat_id)
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ª—É–≥–∏ {service_data.get('service_name', 'Unknown')}: {e}"
                    logging.error(error_msg)
                    
                    if self.config.telegram_enabled:
                        await self.telegram.send_error_notification(error_msg, chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
        self._session = None
    
    # üîÑ RESET-–¶–ò–ö–õ –ú–ï–¢–û–î–´
    
    async def register_visit_from_date(self, service_entry: ServiceEntry, 
                                      channel_id: str, channel_name: str, 
                                      chat_id: str, start_date: str,
                                      max_future_days: int = 30) -> bool:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∏–∑–∏—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–¥–ª—è reset-—Ü–∏–∫–ª–∞).
        –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç last_registered_date –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!
        
        Args:
            service_entry: –î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            channel_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ (YYYY-MM-DD)
            max_future_days: –ú–∞–∫—Å–∏–º—É–º –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤–∏–∑–∏—Ç—ã
        """
        # üîë –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –ù–û–í–£–Æ —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ RESET-—Ü–∏–∫–ª–µ
        # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç ERROR_SESSION_VIOLATION –∏–∑-–∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
        if self._session:
            self._session.close()
        self._session = self._create_session()
        
        logging.info(f"üîÑ [RESET] –ù–∞—á–∞–ª–æ reset-—Ü–∏–∫–ª–∞ –¥–ª—è {service_entry.service_name} —Å {start_date}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —É—Å–ª—É–≥–∏
        service_details = self._get_service_details(self._session, service_entry)
        if not service_details:
            return False
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        duration = int(service_details.get("duration", 20))
        additional = int(service_details.get("additionalDuration", 10))
        slot_length = duration + additional * (service_entry.adult - 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å start_date
        available_dates = self._get_available_dates_from_date(
            self._session, service_entry, slot_length, start_date, max_future_days
        )
        
        if not available_dates:
            logging.info(f"üîÑ [RESET] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è {service_entry.service_name} —Å {start_date}")
            return False
        
        logging.info(f"üîÑ [RESET] –ù–∞–π–¥–µ–Ω–æ {len(available_dates)} –¥–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        total_registered = 0
        total_attempts = 0
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
        for date in available_dates:
            times = self._get_available_times(self._session, service_entry, date, slot_length)
            if not times:
                logging.info(f"üîÑ [RESET] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –Ω–∞ {date}")
                continue
            
            logging.info(f"üîÑ [RESET] –ü—Ä–æ–≤–µ—Ä—è–µ–º {date}: –Ω–∞–π–¥–µ–Ω–æ {len(times)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω")
            
            successful_registrations = 0
            times_copy = times[:]
            
            while successful_registrations < service_entry.visits_per_day and times_copy:
                time_data = random.choice(times_copy)
                times_copy.remove(time_data)
                time_slot = time_data["time"]
                total_attempts += 1
                
                logging.debug(f"üîÑ [RESET] –ü–æ–ø—ã—Ç–∫–∞ {total_attempts}: —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ {date} {time_slot}")
                
                # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                appointment_id = self._reserve_appointment(
                    self._session, service_entry, date, time_slot, slot_length
                )
                
                if not appointment_id:
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                phone = generate_phone(self.config.prefixes)
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                try:
                    self._create_customer(self._session, phone)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                    continue
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                if self._confirm_appointment(self._session, appointment_id, service_entry, phone, slot_length):
                    successful_registrations += 1
                    total_registered += 1
                    logging.info(f"‚úì [RESET] –í–∏–∑–∏—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {date} {time_slot} | {phone}")
                    
                    # üîë –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–ë–´–ß–ù–´–ï TELEGRAM –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                    if self.config.telegram_enabled:
                        visit_info = VisitInfo(
                            service_name=service_entry.service_name,
                            slot_length=slot_length,
                            date=date,
                            time=time_slot,
                            phone=phone,
                            channel_name=channel_name
                        )
                        
                        await self.telegram.send_visit_notification(visit_info, chat_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –¥–µ–Ω—å
                    if successful_registrations >= service_entry.visits_per_day:
                        logging.info(f"üîÑ [RESET] –õ–∏–º–∏—Ç {service_entry.visits_per_day} –≤–∏–∑–∏—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞ {date}")
                        break
                else:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è {time_slot}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                time.sleep(random.uniform(5, 10))
        
        if total_registered > 0:
            logging.info(f"üîÑ [RESET] –ó–∞–≤–µ—Ä—à–µ–Ω reset-—Ü–∏–∫–ª: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_registered} –≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è {service_entry.service_name}")
            if total_attempts > total_registered:
                logging.info(f"üìä [RESET] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_registered}/{total_attempts} —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–π")
            return True
        else:
            if total_attempts > 0:
                success_rate = (total_registered / total_attempts) * 100
                logging.info(f"üìä [RESET] –í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã: {total_registered}/{total_attempts} –ø–æ–ø—ã—Ç–æ–∫ ({success_rate:.1f}% —É—Å–ø–µ—à–Ω—ã—Ö) –¥–ª—è {service_entry.service_name}")
                logging.info(f"üîç [RESET] –ü—Ä–∏—á–∏–Ω—ã –Ω–µ—É–¥–∞—á: –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
            else:
                logging.info(f"üîÑ [RESET] Reset-—Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è {service_entry.service_name} - –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω")
            return False
    
    def _get_available_dates_from_date(self, session: requests.Session, 
                                      service_entry: ServiceEntry, slot_length: int,
                                      start_date: str, max_future_days: int = 30) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã (–¥–ª—è reset-—Ü–∏–∫–ª–∞).
        –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç last_registered_date.
        """
        try:
            url = (f"{self.config.base_url}/branches/{service_entry.branch_id}/dates;"
                  f"servicePublicId={service_entry.service_id};"
                  f"customSlotLength={slot_length}")
            
            dates = session.get(url, timeout=30).json()
            
            # üîë –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–£–Æ –§–£–ù–ö–¶–ò–Æ –î–õ–Ø RESET-–¶–ò–ö–õ–ê
            filtered_dates = find_dates_from_date(dates, start_date, max_future_days)
            
            logging.debug(f"üîÑ [RESET] API –≤–µ—Ä–Ω—É–ª {len(dates)} –¥–∞—Ç, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_dates)} —Å {start_date}")
            return filtered_dates
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç –¥–ª—è reset-—Ü–∏–∫–ª–∞ {service_entry.service_name}: {e}")
            return []
    
    async def run_reset_cycle_for_all_services(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç reset-—Ü–∏–∫–ª –¥–ª—è –≤—Å–µ—Ö —É—Å–ª—É–≥ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö."""
        if not self.config.reset_cycle_enabled:
            logging.debug("üîÑ Reset-—Ü–∏–∫–ª –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return
        
        start_date = get_server_current_date()
        max_future_days = self.config.reset_cycle_max_future_days
        
        logging.info(f"üîÑ –ó–∞–ø—É—Å–∫ RESET-–¶–ò–ö–õ–ê: –ø–æ–∏—Å–∫ —Å {start_date}, –º–∞–∫—Å–∏–º—É–º {max_future_days} –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥")
        
        total_services = 0
        successful_services = 0
        
        for channel in self.config.channels:
            channel_id = channel['id']
            channel_name = channel['name']
            chat_id = channel['chat_id']
            
            logging.info(f"üîÑ [RESET] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {channel_name}")
            
            for service_data in channel.get('services', []):
                total_services += 1
                try:
                    service_entry = ServiceEntry(
                        branch_name=service_data['branch_name'],
                        branch_id=service_data['branch_id'],
                        service_name=service_data['service_name'],
                        service_id=service_data['service_id'],
                        qp_id=service_data['qpId'],
                        adult=service_data['adult'],
                        visits_per_day=service_data['visits_per_day'],
                        last_registered_date=None  # üîë –ò–ì–ù–û–†–ò–†–£–ï–ú last_registered_date!
                    )
                    
                    # üîë –ù–ï –û–ë–ù–û–í–õ–Ø–ï–ú last_registered_date –≤ –∫–æ–Ω—Ñ–∏–≥–µ!
                    success = await self.register_visit_from_date(
                        service_entry, channel_id, channel_name, chat_id,
                        start_date, max_future_days
                    )
                    
                    if success:
                        successful_services += 1
                    
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ reset-—Ü–∏–∫–ª–∞ –¥–ª—è —É—Å–ª—É–≥–∏ {service_data.get('service_name', 'Unknown')}: {e}"
                    logging.error(error_msg)
                    
                    if self.config.telegram_enabled:
                        await self.telegram.send_error_notification(error_msg, chat_id)
        
        logging.info(f"üîÑ RESET-–¶–ò–ö–õ –∑–∞–≤–µ—Ä—à–µ–Ω: {successful_services}/{total_services} —É—Å–ª—É–≥ —Å –Ω–æ–≤—ã–º–∏ –≤–∏–∑–∏—Ç–∞–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
        self._session = None
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞."""
        if self._session:
            self._session.close() 